<?php 

//------------------------------------------------------------------------------
// Drupal hooks
//------------------------------------------------------------------------------

/**
 * Implementation of hook_perm().
 */
function notebook_perm() {
  return array(
    'create note content',
    'delete own note content',
    'delete any note content',
    'edit own note content',
    'edit any note content',
  );
}

//------------------------------------------------------------------------------
// Node hooks
//------------------------------------------------------------------------------

/**
 * Implementation of hook_node_info().
 */
function notebook_node_info() {
  return array(
    'note' => array(
      'name' => t('Note'),
      'module' => 'notebook',
      'description' => t("A note is a message/reminder easily posted at any page of the site."),
      'has_title' => FALSE,
      'has_body' => TRUE,
      'body_label' => t('Message'),
    )
  );
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_access().
 */
function notebook_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create note content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any note content', $account) || (user_access('edit own note content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any note content', $account) || (user_access('delete own note content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_form().
 */
function notebook_form(&$node) {
  // The site admin can decide if this node type has a title and body, and how
  // the fields should be labeled. We need to load these settings so we can
  // build the node form correctly.
  $type = node_get_types('type', $node);

  if ($type->has_title) {
    $form['title'] = array(
      '#type' => 'textfield',
      '#title' => check_plain($type->title_label),
      '#required' => TRUE,
      '#default_value' => $node->title,
      '#weight' => -5,
    );
  }

  if ($type->has_body) {
    // In Drupal 6, we can use node_body_field() to get the body and filter
    // elements. This replaces the old textarea + filter_form() method of
    // setting this up. It will also ensure the teaser splitter gets set up
    // properly.
    $form['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  }

  // A link is stored whenever only when we submit a new note.
  $form['link'] = array(
    '#type' => 'value',
    '#value' => (isset($node->link) ? $node->link : $_GET['q']),
  );
  
  return $form;
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_load().
 *
 * Now that we've defined how to manage the node data in the database, we
 * need to tell Drupal how to get the node back out. This hook is called
 * every time a node is loaded, and allows us to do some loading of our own.
 */
function notebook_load($node) {
  $additions = db_fetch_object(db_query('SELECT link FROM {note} WHERE vid = %d', $node->vid));
  return $additions;
}


//------------------------------------------------------------------------------

/**
 * Implementation of hook_insert().
 */
function notebook_insert($node) {
  db_query("INSERT INTO {note} (vid, nid, link) VALUES (%d, %d, '%s')", $node->vid, $node->nid, $node->link);
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_update().
 */
function notebook_update($node) {
  // if this is a new node or we're adding a new revision,
  if ($node->revision) {
    notebook_insert($node);
  }
  else {
    db_query("UPDATE {note} SET link = '%s' WHERE vid = %d", $node->link, $node->vid);
  }
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_delete().
 */
function notebook_delete($node) {
  db_query('DELETE FROM {note} WHERE nid = %d', $node->nid);
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_nodeapi().
 */
function notebook_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'delete revision':
      db_query('DELETE FROM {note} WHERE vid = %d', $node->vid);
      break;
  }
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_view().
 */
function notebook_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  
  $node->content['link'] = array(
    '#value' => theme('note_link', $node),
    '#weight' => 1,
  );

  return $node;
}

//------------------------------------------------------------------------------

/**
 * Implementation of hook_theme().
 *
 * This lets us tell Drupal about our theme functions and their arguments.
 */
function notebook_theme() {
  return array(
    'note_link' => array(
      'arguments' => array('node'),
    ),
  );
}

//------------------------------------------------------------------------------
// Theme functions
//------------------------------------------------------------------------------

/**
 * Render note link to page posted on.
 */
function theme_node_example_order_info($node) {
  $output = '<div class="note-link">';
  $output .= l(t('Link to page posted on'), $node->link);
  $output .= '</div>';
  return $output;
}






//------------------------------------------------------------------------------